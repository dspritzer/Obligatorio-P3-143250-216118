//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Presentacion.refProv {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="refProv.IServiceWCFProveedores")]
    public interface IServiceWCFProveedores {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/ObtenerTodos", ReplyAction="http://tempuri.org/IServiceWCFProveedores/ObtenerTodosResponse")]
        Dominio.Proveedor[] ObtenerTodos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/ObtenerTodos", ReplyAction="http://tempuri.org/IServiceWCFProveedores/ObtenerTodosResponse")]
        System.Threading.Tasks.Task<Dominio.Proveedor[]> ObtenerTodosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/insertar", ReplyAction="http://tempuri.org/IServiceWCFProveedores/insertarResponse")]
        bool insertar(string rut, string nombre, string mail, string tel, System.DateTime fecha, bool vip, string passw, string nomserv, string descserv, int tiposerv, string fotoserv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/insertar", ReplyAction="http://tempuri.org/IServiceWCFProveedores/insertarResponse")]
        System.Threading.Tasks.Task<bool> insertarAsync(string rut, string nombre, string mail, string tel, System.DateTime fecha, bool vip, string passw, string nomserv, string descserv, int tiposerv, string fotoserv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/listarTiposServ", ReplyAction="http://tempuri.org/IServiceWCFProveedores/listarTiposServResponse")]
        ServiciosWCF.DTOTipoServicio[] listarTiposServ();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/listarTiposServ", ReplyAction="http://tempuri.org/IServiceWCFProveedores/listarTiposServResponse")]
        System.Threading.Tasks.Task<ServiciosWCF.DTOTipoServicio[]> listarTiposServAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/listarTiposEvPorServ", ReplyAction="http://tempuri.org/IServiceWCFProveedores/listarTiposEvPorServResponse")]
        ServiciosWCF.DTOTipoEvento[] listarTiposEvPorServ(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/listarTiposEvPorServ", ReplyAction="http://tempuri.org/IServiceWCFProveedores/listarTiposEvPorServResponse")]
        System.Threading.Tasks.Task<ServiciosWCF.DTOTipoEvento[]> listarTiposEvPorServAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/leerServicio", ReplyAction="http://tempuri.org/IServiceWCFProveedores/leerServicioResponse")]
        ServiciosWCF.DTOServicio leerServicio(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/leerServicio", ReplyAction="http://tempuri.org/IServiceWCFProveedores/leerServicioResponse")]
        System.Threading.Tasks.Task<ServiciosWCF.DTOServicio> leerServicioAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/leerTipoServicio", ReplyAction="http://tempuri.org/IServiceWCFProveedores/leerTipoServicioResponse")]
        ServiciosWCF.DTOTipoServicio leerTipoServicio(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/leerTipoServicio", ReplyAction="http://tempuri.org/IServiceWCFProveedores/leerTipoServicioResponse")]
        System.Threading.Tasks.Task<ServiciosWCF.DTOTipoServicio> leerTipoServicioAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/leerTipoEvento", ReplyAction="http://tempuri.org/IServiceWCFProveedores/leerTipoEventoResponse")]
        ServiciosWCF.DTOTipoEvento leerTipoEvento(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/leerTipoEvento", ReplyAction="http://tempuri.org/IServiceWCFProveedores/leerTipoEventoResponse")]
        System.Threading.Tasks.Task<ServiciosWCF.DTOTipoEvento> leerTipoEventoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/desactivarProveedor", ReplyAction="http://tempuri.org/IServiceWCFProveedores/desactivarProveedorResponse")]
        bool desactivarProveedor(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFProveedores/desactivarProveedor", ReplyAction="http://tempuri.org/IServiceWCFProveedores/desactivarProveedorResponse")]
        System.Threading.Tasks.Task<bool> desactivarProveedorAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceWCFProveedoresChannel : Presentacion.refProv.IServiceWCFProveedores, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceWCFProveedoresClient : System.ServiceModel.ClientBase<Presentacion.refProv.IServiceWCFProveedores>, Presentacion.refProv.IServiceWCFProveedores {
        
        public ServiceWCFProveedoresClient() {
        }
        
        public ServiceWCFProveedoresClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceWCFProveedoresClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWCFProveedoresClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWCFProveedoresClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Dominio.Proveedor[] ObtenerTodos() {
            return base.Channel.ObtenerTodos();
        }
        
        public System.Threading.Tasks.Task<Dominio.Proveedor[]> ObtenerTodosAsync() {
            return base.Channel.ObtenerTodosAsync();
        }
        
        public bool insertar(string rut, string nombre, string mail, string tel, System.DateTime fecha, bool vip, string passw, string nomserv, string descserv, int tiposerv, string fotoserv) {
            return base.Channel.insertar(rut, nombre, mail, tel, fecha, vip, passw, nomserv, descserv, tiposerv, fotoserv);
        }
        
        public System.Threading.Tasks.Task<bool> insertarAsync(string rut, string nombre, string mail, string tel, System.DateTime fecha, bool vip, string passw, string nomserv, string descserv, int tiposerv, string fotoserv) {
            return base.Channel.insertarAsync(rut, nombre, mail, tel, fecha, vip, passw, nomserv, descserv, tiposerv, fotoserv);
        }
        
        public ServiciosWCF.DTOTipoServicio[] listarTiposServ() {
            return base.Channel.listarTiposServ();
        }
        
        public System.Threading.Tasks.Task<ServiciosWCF.DTOTipoServicio[]> listarTiposServAsync() {
            return base.Channel.listarTiposServAsync();
        }
        
        public ServiciosWCF.DTOTipoEvento[] listarTiposEvPorServ(int id) {
            return base.Channel.listarTiposEvPorServ(id);
        }
        
        public System.Threading.Tasks.Task<ServiciosWCF.DTOTipoEvento[]> listarTiposEvPorServAsync(int id) {
            return base.Channel.listarTiposEvPorServAsync(id);
        }
        
        public ServiciosWCF.DTOServicio leerServicio(int id) {
            return base.Channel.leerServicio(id);
        }
        
        public System.Threading.Tasks.Task<ServiciosWCF.DTOServicio> leerServicioAsync(int id) {
            return base.Channel.leerServicioAsync(id);
        }
        
        public ServiciosWCF.DTOTipoServicio leerTipoServicio(int id) {
            return base.Channel.leerTipoServicio(id);
        }
        
        public System.Threading.Tasks.Task<ServiciosWCF.DTOTipoServicio> leerTipoServicioAsync(int id) {
            return base.Channel.leerTipoServicioAsync(id);
        }
        
        public ServiciosWCF.DTOTipoEvento leerTipoEvento(int id) {
            return base.Channel.leerTipoEvento(id);
        }
        
        public System.Threading.Tasks.Task<ServiciosWCF.DTOTipoEvento> leerTipoEventoAsync(int id) {
            return base.Channel.leerTipoEventoAsync(id);
        }
        
        public bool desactivarProveedor(int id) {
            return base.Channel.desactivarProveedor(id);
        }
        
        public System.Threading.Tasks.Task<bool> desactivarProveedorAsync(int id) {
            return base.Channel.desactivarProveedorAsync(id);
        }
    }
}
